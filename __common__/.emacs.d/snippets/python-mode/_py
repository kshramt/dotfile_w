# -*- mode: snippet -*-
# name: py
# key: _py
# --
#!/usr/bin/python3

import argparse
import datetime
import logging
import os
import pickle
import sys
import urllib

# import pickle

# import numpy as np
# import scipy as sp
# import matplotlib.pyplot as plt
# import pandas as pd


__version__ = "0.1.0"
logger = logging.getLogger(__name__)


def main(argv):
    args = _parse_argv(argv[1:])
    _add_handlers(logger, [args.log_file], level_stderr=args.log_level)
    logger.debug("args\t%s", args)
    run(args)


def run(args):
    pass$0


def _parse_argv(argv):
    logger.debug("argv\t%s", argv)
    doc = f"""
    {__file__}
    """

    parser = argparse.ArgumentParser(
        doc, formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "--version", action="version", version=f"%(prog)s {__version__}"
    )
    parser.add_argument(
        "--log_level",
        default="warning",
        type=lambda x: getattr(logging, x.upper()),
        help="Set log level.",
    )
    parser.add_argument(
        "--log_file",
        default=os.path.join(
            os.environ["HOME"],
            "d",
            "trash",
            "logging.py",
            datetime.datetime.now().strftime("%y%m%d%H%M%S")
            + "_"
            + str(os.getpid())
            + "_"
            + os.path.basename(__file__)
            + ".log",
        ),
        help="Set log file.",
    )
    parser.add_argument("--args", type=str, default=None)
    args = parser.parse_args(argv)
    if args.args is not None:
        args = load_pickle(args.args)
    logger.debug("args\t%s", args)
    return args


def _add_handlers(logger, paths, level_stderr=logging.INFO, level_path=logging.DEBUG):
    logger.setLevel(logging.DEBUG)
    fmt = logging.Formatter(
        "%(levelname)s\t%(process)d\t%(asctime)s\t%(filename)s\t%(funcName)s\t%(lineno)d\t%(message)s"
    )

    hdl = logging.StreamHandler(sys.stderr)
    hdl.setFormatter(fmt)
    hdl.setLevel(level_stderr)
    logger.addHandler(hdl)

    for path in paths:
        mkdir(dirname(path))
        hdl = logging.FileHandler(path)
        hdl.setFormatter(fmt)
        hdl.setLevel(level_path)
        logger.addHandler(hdl)

    logger.info("log files\t%s", paths)
    return logger


def mkdir(path):
    os.makedirs(path, exist_ok=True)


def dirname(path):
    return os.path.dirname(path) or os.path.curdir


def jp(path, *more):
    puri = urllib.parse.urlparse(os.path.sep.join((path, os.path.sep.join(more))))
    return urllib.parse.ParseResult(
        **{**puri._asdict(), **dict(path=os.path.normpath(puri.path))}
    ).geturl()


def load_pickle(path):
    with open(path, "rb") as fp:
        return pickle.load(fp)


if __name__ == "__main__":
    main(sys.argv)
