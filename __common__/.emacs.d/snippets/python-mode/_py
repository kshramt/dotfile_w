# -*- mode: snippet -*-
# name: py
# key: _py
# --
#!/usr/bin/python3

import argparse
import collections
import datetime
import logging
import logging.config
import os
import pathlib
import pickle
import sys
import time
import urllib

# import pythonjsonlogger.jsonlogger


__version__ = "1.0.0"
logger = logging.getLogger(__name__)


class _UtcFormatter(logging.Formatter):
    converter = time.gmtime
    default_time_format = "%Y-%m-%dT%H:%M:%S"
    default_msec_format = "%s.%03dZ"


# class _UtcJsonFormatter(pythonjsonlogger.jsonlogger.JsonFormatter):
#     converter = time.gmtime
#     default_time_format = "%Y-%m-%dT%H:%M:%S"
#     default_msec_format = "%s.%03dZ"


def main(argv):
    args = _parse_argv(argv[1:])
    logging.config.dictConfig(
        _log_config_of([args.log_file], level_stderr=args.log_level)
    )
    logger.debug(dict(args=vars(args)))
    run(args)


def run(args):
    pass$0


def _parse_argv(argv):
    logger.debug(dict(argv=argv))
    doc = f"""
    {__file__}
    """

    parser = argparse.ArgumentParser(
        doc, formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "--version", action="version", version=f"%(prog)s {__version__}"
    )
    parser.add_argument(
        "--log_level",
        default="warning",
        type=lambda x: getattr(logging, x.upper()),
        help="Set log level.",
    )
    parser.add_argument(
        "--log_file",
        default=os.path.join(
            os.environ["HOME"],
            "d",
            "trash",
            "logging.py",
            datetime.datetime.now().strftime("%y%m%d%H%M%S")
            + "_"
            + str(os.getpid())
            + "_"
            + os.path.basename(__file__)
            + ".log",
        ),
        help="Set log file.",
    )
    parser.add_argument("--args", type=str, default=None)
    args = parser.parse_args(argv)
    if args.args is not None:
        args = load_pickle(args.args)
    return args


def _log_config_of(
    paths: collections.abc.Sequence[str],
    level_stderr: int = logging.INFO,
    level_path: int = logging.DEBUG,
    version=1,
    disable_existing_loggers=False,
):
    for path in paths:
        pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)
    # fmt = "%(levelname)s\t%(process)d\t%(asctime)s.%(msecs)03d\t%(pathname)s\t%(funcName)s\t%(lineno)d\t%(message)s"
    fmt = "%(levelname)s\t%(process)d\t%(asctime)s\t%(name)s\t%(funcName)s\t%(lineno)d\t%(message)s"
    formatters = dict(
        tab={
            "()": _UtcFormatter,
            "format": fmt,
        },
        # json={
        #     "()": _UtcJsonFormatter,
        #     "format": fmt,
        #     "json_ensure_ascii": False,
        #     "rename_fields": dict(asctime="timestamp", levelname="severity"),
        # },
    )
    handlers = dict(
        stderr={
            "class": "logging.StreamHandler",
            "formatter": "tab",
            "level": level_stderr,
            "stream": "ext://sys.stderr",
        },
        **{
            str(i): {
                "class": "logging.FileHandler",
                "formatter": "tab",
                "level": level_path,
                "filename": path,
            }
            for i, path in enumerate(paths)
        },
    )
    log_config = dict(
        version=version,
        disable_existing_loggers=disable_existing_loggers,
        formatters=formatters,
        handlers=handlers,
        root=dict(level=logging.DEBUG, handlers=list(handlers.keys())),
    )
    return log_config


def jp(path, *more):
    puri = urllib.parse.urlparse(os.path.sep.join((path, os.path.sep.join(more))))
    return urllib.parse.ParseResult(
        **{**puri._asdict(), **dict(path=os.path.normpath(puri.path))}
    ).geturl()


def load_pickle(path):
    with open(path, "rb") as fp:
        return pickle.load(fp)


if __name__ == "__main__":
    main(sys.argv)
